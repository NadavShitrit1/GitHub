// <auto-generated />
using System;
using GitHub_BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GitHubBackEnd.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("GitHub_BackEnd.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GitHub_BackEnd.Entities.GitHubRepository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("GitHubId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("allow_forking")
                        .HasColumnType("INTEGER");

                    b.Property<string>("archive_url")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("archived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("assignees_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("blobs_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("branches_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("clone_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("collaborators_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("comments_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("commits_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("compare_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("contents_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("contributors_url")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("default_branch")
                        .HasColumnType("TEXT");

                    b.Property<string>("deployments_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("disabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("downloads_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("events_url")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("fork")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("forks")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("forks_count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("forks_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("full_name")
                        .HasColumnType("TEXT");

                    b.Property<string>("git_commits_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("git_refs_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("git_tags_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("git_url")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("has_downloads")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("has_issues")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("has_pages")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("has_projects")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("has_wiki")
                        .HasColumnType("INTEGER");

                    b.Property<string>("homepage")
                        .HasColumnType("TEXT");

                    b.Property<string>("hooks_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("html_url")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("is_template")
                        .HasColumnType("INTEGER");

                    b.Property<string>("issue_comment_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("issue_events_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("issues_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("keys_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("labels_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("language")
                        .HasColumnType("TEXT");

                    b.Property<string>("languages_url")
                        .HasColumnType("TEXT");

                    b.Property<int?>("licenseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("merges_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("milestones_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("mirror_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("node_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("notifications_url")
                        .HasColumnType("TEXT");

                    b.Property<int?>("open_issues")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("open_issues_count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ownerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("private")
                        .HasColumnType("INTEGER");

                    b.Property<string>("pulls_url")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("pushed_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("releases_url")
                        .HasColumnType("TEXT");

                    b.Property<int?>("size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ssh_url")
                        .HasColumnType("TEXT");

                    b.Property<int?>("stargazers_count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("stargazers_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("statuses_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("subscribers_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("subscription_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("svn_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("tags_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("teams_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("trees_url")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.Property<string>("visibility")
                        .HasColumnType("TEXT");

                    b.Property<int?>("watchers")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("watchers_count")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("licenseId");

                    b.HasIndex("ownerId");

                    b.ToTable("GitHubRepositories");
                });

            modelBuilder.Entity("GitHub_BackEnd.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("key")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("node_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("spdx_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("License");
                });

            modelBuilder.Entity("GitHub_BackEnd.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("avatar_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("events_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("followers_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("following_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("gists_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("gravatar_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("html_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("login")
                        .HasColumnType("TEXT");

                    b.Property<string>("node_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("organizations_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("received_events_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("repos_url")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("site_admin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("starred_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("subscriptions_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("GitHub_BackEnd.Entities.GitHubRepository", b =>
                {
                    b.HasOne("GitHub_BackEnd.Entities.AppUser", "User")
                        .WithMany("GitHubRepositories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GitHub_BackEnd.Entities.License", "license")
                        .WithMany("Repositories")
                        .HasForeignKey("licenseId");

                    b.HasOne("GitHub_BackEnd.Entities.Owner", "owner")
                        .WithMany("Repositories")
                        .HasForeignKey("ownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("license");

                    b.Navigation("owner");
                });

            modelBuilder.Entity("GitHub_BackEnd.Entities.AppUser", b =>
                {
                    b.Navigation("GitHubRepositories");
                });

            modelBuilder.Entity("GitHub_BackEnd.Entities.License", b =>
                {
                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("GitHub_BackEnd.Entities.Owner", b =>
                {
                    b.Navigation("Repositories");
                });
#pragma warning restore 612, 618
        }
    }
}
